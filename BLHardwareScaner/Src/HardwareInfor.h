

#ifndef _HARDWAREINFOR_H_
#define _HARDWAREINFOR_H_

#include <string>
using std::string;
using std::wstring;

#ifndef IN
#define IN
#endif

#ifndef INOUT
#define INOUT
#endif

#ifndef OUT
#define OUT
#endif

/// @brief 获取计算机类型
enum COMPUTER_TYPE
{
    COMPUTER_TYPE_UNKNOWN = 0, ///< 未知
    COMPUTER_TYPE_DESKTOP = 1, ///< 台式机
    COMPUTER_TYPE_NOTE_BOOK = 2, ///< 笔记本
    COMPUTER_TYPE_TABLET = 3 ///< 平板电脑
};

/// @brief 计算机系统信息结构
struct ComputerSystemInfor
{
    wstring ModelName; ////< 机种名
    wstring Manufacturer; ///< 制造商
    COMPUTER_TYPE Type; ///< 计算机类型
};

/// @brief 操作系统信息结构
struct OperatingSystemInfor
{
    wstring Caption; ////< 标题
    wstring Architecture; ////< 架构
    wstring Version; ////< 版本
    wstring SystemDrive; ////< 系统盘
};

/// @brief 主板信息结构
struct BaseBoardInfor
{
    wstring Description; ///< 描述
    wstring Manufacturer; ///< 制造商
    wstring SerialNumber; ///< 序列号

    wstring BiosSerialNumber; ///< Bios序列号
    wstring BiosVersion; ///< Bios版本
};

/// @brief 处理器信息
struct ProcessorInfor
{
    wstring Name; ///< 名称
    wstring Description; ///< 描述
    wstring Manufacturer; ///< 制造商
    unsigned long CoresNumber; ///< 核心数
    unsigned long LogicalProcessorNumber; ///< 逻辑处理器数量
    unsigned long MaxClockSpeed; ///< 最大频率(MHz)
};

/// @brief 显卡类型
enum DISPLAY_CARD_TYPE
{
    DISPLAY_CARD_UNKNOWN = 0, ///< 未知
    DISPLAY_CARD_INTERNAL, ///< 集成显卡
    DISPLAY_CARD_EXTERNAL ///< 独立显卡
};

/// @brief 最大显卡数量
#define MAX_DISPLAYCARD_NUMBER 4

/// @brief 显卡信息组
struct DisplayCardInforArray
{
    unsigned long Count; ///< 显卡数量
    wstring Description[MAX_DISPLAYCARD_NUMBER]; ///< 显卡描述
    DISPLAY_CARD_TYPE Type[MAX_DISPLAYCARD_NUMBER]; ///< 显卡类型
    unsigned long RAMSize[MAX_DISPLAYCARD_NUMBER]; ///< 显存大小, 单位(M)
};

/// @brief 最大物理内存数量
#define MAX_PHYSICAL_MEMORY_NUMBER 8

/// @brief 内存信息组
struct PhysicalMemoryInforArray
{
    unsigned long Count; ///< 内存数量
    wstring Manufacturer[MAX_PHYSICAL_MEMORY_NUMBER]; ///< 制造商
    wstring SerialNumber[MAX_PHYSICAL_MEMORY_NUMBER]; ///< 序列号
    wstring PartNumbe[MAX_PHYSICAL_MEMORY_NUMBER]; ///< 型号
    unsigned long Capacity[MAX_PHYSICAL_MEMORY_NUMBER]; ///< 内存容量, 单位(M)
    unsigned long Speed[MAX_PHYSICAL_MEMORY_NUMBER]; ///< 内存频率
};

/// @brief 最大磁盘驱动器数量
#define MAX_DISK_NUMBER 8

/// @brief 磁盘类型
enum DISK_TYPE
{
    UNKNOWN_DISK = 0, // 未知类型
    FIXED_IDE_DISK = 1, // 固定磁盘(如本地硬盘)
    EXTERNAL_USB_DISK = 2, // 扩展磁盘(如USB移动硬盘)
    VIRTUAL_DISK = 3, // 虚拟硬盘(如VHD)
    USB_FLASH_DISK = 4, // U盘
    SD_CARD_DISK = 5// SD卡
};

/// @brief 磁盘信息组
struct DiskInforArray 
{
    unsigned long Count; ///< 磁盘数量
    wstring Model[MAX_DISK_NUMBER]; ///< 磁盘型号
    wstring SerialNumber[MAX_DISK_NUMBER]; ///< 磁盘序列号
    unsigned long TotalSize[MAX_DISK_NUMBER]; ///< 磁盘总大小, 单位(G)
    wstring DeviceID[MAX_DISK_NUMBER]; ///< 磁盘设备ID
    wstring PNPDeviceID[MAX_DISK_NUMBER]; ///< 磁盘设备实例路径
    wstring InterfaceType[MAX_DISK_NUMBER]; ///< 磁盘接口类型(SCSI, HDC, IDE, USB 1394)
    DISK_TYPE DiskType[MAX_DISK_NUMBER]; ///< 磁盘类型
};

/// @brief 最大显示器数量
#define MAX_MONITOR_NUMBER 8

/// @brief 显示器信息组
struct MonitorInforArray
{
    unsigned long Count; ///< 显示器数量
    string Name[MAX_MONITOR_NUMBER]; ///< 显示器名称
    string Date[MAX_MONITOR_NUMBER]; ////< 显示器生产日期
};

/// @brief 硬件信息类
///
/// 该类获取的都是固定信息
class HardwareInfor
{
public:
    /// @brief 获取实例对象
    /// @return 实例对象
    static HardwareInfor& GetInstance();

    /// @brief 获取计算机系统信息
    /// @return 计算机系统信息
    const ComputerSystemInfor& GetComputerSystemInfor() const; 

    /// @brief 获取操作系统信息
    /// @return 操作系统信息
    const OperatingSystemInfor& GetOperatingSystemInfor() const;

    /// @brief 获取主板信息
    /// @return 主板信息
    const BaseBoardInfor& GetBaseBoardInfor() const;

    /// @brief 获取处理器信息
    /// @return 处理器信息
    const ProcessorInfor& GetProcessorInfor() const;

    /// @brief 获取显卡信息
    /// @return 显卡信息
    const DisplayCardInforArray& GetDisplayCardInfor() const;

    /// @brief 获取物理内存信息
    /// @return 物理内存信息
    const PhysicalMemoryInforArray& GetPhysicalMemoryInfor() const;

    /// @brief 获取磁盘信息
    /// @return 磁盘信息
    const DiskInforArray& GetDiskInfor();

    /// @brief 获取显示器信息
    /// @return 显示器信息
    const MonitorInforArray& GetMonitorInfor();

    /// @brief 析构函数
    ~HardwareInfor();

private:
    /// @brief 扫描硬件信息
    void Scan();
    
    /// @brief 扫描计算机系统信息
    /// @param[out] computerSystemInfor 存储计算机系统信息
    void ScanComputerSystemInfor(OUT ComputerSystemInfor& computerSystemInfor);

    /// @brief 扫描操作系统信息
    /// @param[out] operatingSystemInfor 操作系统信息
    void ScanOperatingSystemInfor(OUT OperatingSystemInfor& operatingSystemInfor);

    /// @brief 扫描主板信息
    /// @param[out] baseBoardInfor 主板信息
    void ScanBaseBoardInfor(OUT BaseBoardInfor& baseBoardInfor);

    /// @brief 扫描处理器信息
    /// @param[out] processorInfor 存储处理器信息
    void ScanProcessorInfor(OUT ProcessorInfor& processorInfor);

    /// @brief 扫描显卡信息
    /// @param[out] displayCardInfor 存储显卡信息
    void ScanDisplayCardInfor(OUT DisplayCardInforArray& displayCardInfor);

    /// @brief 扫描显卡信息
    /// @param[out] physicalMemoryInfor 存储物理内存信息
    void ScanPhysicalMemoryInfor(OUT PhysicalMemoryInforArray& physicalMemoryInfor);

    /// @brief 扫描磁盘信息
    /// @param[out] diskInfor 存储磁盘信息
    void ScanDiskInfor(OUT DiskInforArray& diskInfor);

    /// @brief 扫描显示器信息
    /// @param[out] monitorInfor 存储显示器信息
    void ScanMonitorInfor(OUT MonitorInforArray& monitorInfor);

    HardwareInfor(); // 禁止构造
    HardwareInfor(const HardwareInfor&); // 禁止默认拷贝构造函数
    HardwareInfor& operator = (const HardwareInfor&); // 禁止赋值操作符

private:
    ComputerSystemInfor m_computerSystemInfor; ///< 计算机系统信息
    OperatingSystemInfor m_operatingSystemInfor; ///< 操作系统信息
    BaseBoardInfor m_baseBoardInfor; ///< 主板信息
    ProcessorInfor m_processorInfor; ///< 处理器信息
    DisplayCardInforArray m_displayCardInfor; ///< 显卡信息
    PhysicalMemoryInforArray m_physicalMemoryInfor; ///< 物理内存信息
    DiskInforArray m_diskInfor; ///< 磁盘信息
    MonitorInforArray m_monitorInfor; ////< 显示器信息
};

#endif